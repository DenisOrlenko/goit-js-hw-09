{"mappings":"gfACA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,QAASF,SAASC,cAAc,kBAChCE,OAAQH,SAASC,cAAc,iBAC/BG,QAASJ,SAASC,cAAc,mBAChCI,UAAWL,SAASC,cAAc,WAICH,EAAhCC,KAAKO,iBAAiB,UAO3B,SAAsBC,G,kBA2DO,IAANC,EAAUC,EACzBC,GADeF,EA7BLG,EA6BeF,EA7BZG,EA8BbF,EAAgBG,KAAKC,SAAW,GAG/B,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WAMLR,EAEFM,EAAQ,CAAER,WAAUC,UAGpBQ,EAAO,CAAET,WAAUC,S,GAEpBA,E,KA5C+DU,MAA1D,SAAAC,G,IAAGZ,EAAQY,EAARZ,SAAUC,EAAKW,EAALX,MACjBb,EAAAyB,OAAOC,QAAQ,uBAAwCC,OAAff,EAAS,QAAYe,OAANd,EAAM,M,IAE9De,OAAM,SAAAJ,G,IAAGZ,EAAQY,EAARZ,SAAUC,EAAKW,EAALX,MAClBb,EAAAyB,OAAOI,QAAQ,sBAAuCF,OAAff,EAAS,QAAYe,OAANd,EAAM,M,IAGnBiB,SAAlC,WACPR,YAAW,WAELP,IAAMgB,IAEqB7B,EAAxBO,UAAUuB,UAAW,E,GAK3B,I,IAG4BhB,GAAfiB,C,EAnDtBtB,EAAEuB,iBAEFhC,EAAKO,UAAUuB,UAAW,EAO1BhB,EAAmBmB,OAAOjC,EAAKI,QAAQ8B,OACvCH,EAAiBE,OAAOjC,EAAKK,OAAO6B,OACpCL,EAAcI,OAAOjC,EAAKM,QAAQ4B,OAelC,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAaM,GAAK,EAACC,EAAAD,E,IAhC0B,IAAhErB,EAAmB,KACnBiB,EAAiB,KACjBF,EAAc,I","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayEl: document.querySelector('[name=\"delay\"]'),\n  stepEl: document.querySelector('[name=\"step\"]'),\n  amountE: document.querySelector('[name=\"amount\"]'),\n  submitBtn: document.querySelector('button'),\n};\n\n// При событии SUBMIT на элементе refs.form => будет вызываться ф-я onFormSubmit\nrefs.form.addEventListener('submit', onFormSubmit);\n\n// Обьявляю переменные, которые будут принимать значения, вводимые пользователем\nlet firtstDelayValue = null;\nlet stepDelayValue = null;\nlet amountValue = null;\n\nfunction onFormSubmit(e) {\n  // При отправке формы (сабмит) => страница не будет перезагружаться\n  e.preventDefault();\n  // При нажатии на кнопку - вешаю атрибут disabled - т.е. делаю кнопку некликабельной\n  refs.submitBtn.disabled = true;\n  // или\n  // refs.form.lastElementChild.setAttribute('disabled', '');\n\n  // 1\n  // Привязываю имя переменных к полям формы для дальнейшей работы с данными, вводимыми пользователем +\n  // Number() - привожу к числу\n  firtstDelayValue = Number(refs.delayEl.value);\n  stepDelayValue = Number(refs.stepEl.value);\n  amountValue = Number(refs.amountE.value);\n  //\n  // или\n  // const {delay, step, amount} = e.target.elements\n  // console.log(delay, step, amount)\n  // delayValue = Number(e.target.delay.value);\n  // stepValue = Number(e.target.step.value);\n  // amountValue = Number(e.target.amount.value);\n  //\n  // или\n  // delayValue = Number(refs.form.elements.delay.value);\n  // stepValue = Number(refs.form.elements.step.value);\n  // amountValue = Number(refs.form.elements.amount.value);\n  //\n  // Применяю цикл для работы с каждым вызовом ф-ии\n  for (let i = 1; i <= amountValue; i += 1) {\n    // Вызываю ф-ю createPromise() => в параметрах ф-ии передаю номер п/п каждоого промиса + задержку\n    createPromise(i, firtstDelayValue)\n      // метод then()\n      // внутри метода - в параметры стрелочной ф-ии будут принимать аргументы из ф-ии createPromise(i, firtstDelayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      })\n      // Метод finally() - будет выполнен в конце, после всех вызовов ф-й\n      .finally(() => {\n        setTimeout(() => {\n          // После окончания вызовов - возвращаю кликабельность кнопки\n          if (i === amountValue) {\n            // 1 - возвращаю кликабельность кнопки\n            refs.submitBtn.disabled = false;\n            // 2\n            // refs.form.lastElementChild.removeAttribute('disabled');\n          }\n          // firtstDelayValue - указываю интервал(задержку) - чтобы сработали все вызова ф-й\n        }, 4000);\n      });\n      // при каждом вызове ф-й - суммирую общее время\n    firtstDelayValue += stepDelayValue;\n  }\n}\n// Обьявляю ф-ю с параметрами\n// position- номер промиса,\n// delay - время, после которого сработала ф-я\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  // В ф-ии createPromise(position, delay) => создаю ПРОМИС\n  //   new Promise((resolve, reject) => {})\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      //   - в случае выполнения условия if() - промис будет выполняться успешно (fulfilled)\n      //   - в случае если условие не будет выполняться if() - промис будет отклонен (rejected)\n      //   - аргументом при вызове ф-й вызова resolve() и reject() => для того, чтобы предать несколько переменных в параетре ф-ии -\n      ////// передаю обьект данных -  { position, delay }\n      //   - устанавливаю задержку выполнения промиса - delay(т.е. через переменную, а именно значение, которое будет вводить пользователь)\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delayEl","stepEl","amountE","submitBtn","addEventListener","e","position","delay","shouldResolve","i","$ce04d3a99e08e73b$var$firtstDelayValue","Math","random","Promise","resolve","reject","setTimeout","then","param","Notify","success","concat","catch","failure","finally","$ce04d3a99e08e73b$var$amountValue","disabled","$ce04d3a99e08e73b$var$stepDelayValue","preventDefault","Number","value","i1","_loop"],"version":3,"file":"03-promises.8ffbb07c.js.map"}